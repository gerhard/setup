set nocompatible " be iMproved, required
filetype off " filetype rules caching interfere with vundle

" set the runtime path to include Vundle & initialize Vundle
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" Let Vundle manage Vundle
Plugin 'gmarik/Vundle.vim'
" Universal set of vim defaults that everyone can agree on
Plugin 'tpope/vim-sensible'
" All the surrounding motion keys that you know and love
Plugin 'tpope/vim-surround'
" A Git wrapper so awesome, it should be illegal
Plugin 'tpope/vim-fugitive'
" GitHub extension for vim-fugitive
Plugin 'tpope/vim-rhubarb'
" Remaps . in a way that plugins can tap into
Plugin 'tpope/vim-repeat'
" Comment stuff out
Plugin 'tpope/vim-commentary'
" Lightweight support for Ruby's bundler, including gem-ctags support
Plugin 'tpope/vim-bundler'
" Automatically generate ctags for rbenv Ruby stdlibs
Plugin 'tpope/rbenv-ctags'
" Complementary pairs of mappings, including 'You Only Paste Once'
Plugin 'tpope/vim-unimpaired'
" JSON manipulation and pretty printing
Plugin 'tpope/vim-jdaddy'
" Ghetto HTML/XML mappings
Plugin 'tpope/vim-ragtag'
" vim helpers for Unix
Plugin 'tpope/vim-eunuch'
" netrw enhancements - because NERDTree is a vim anti-pattern
Plugin 'tpope/vim-vinegar'
" Status/tabline
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" Check syntax on :w
Plugin 'scrooloose/syntastic'
" The one & only vim finder
Plugin 'kien/ctrlp.vim'
" Perform all your vim insert mode completions with Tab
Plugin 'ervandew/supertab'
" Text filtering and alignment
Plugin 'godlygeek/tabular'
" Syntax highlighting, matching rules and mappings for the original Markdown
Plugin 'plasticboy/vim-markdown'
" Silver searcher, the ack replacement
Plugin 'rking/ag.vim'
" The one and only colour scheme
Plugin 'justinmk/molokai'
" Retro groove color scheme for Vim
Plugin 'morhetz/gruvbox'
" Otimized Solarized color scheme
Plugin 'lifepillar/vim-solarized8'
" JS formatting & syntax
Plugin 'pangloss/vim-javascript'
" Run Rspec specs from Vim
Plugin 'thoughtbot/vim-rspec'
" Develop Golang with joy
Plugin 'fatih/vim-go'
" Vim configuration files for Elixir
Plugin 'elixir-lang/vim-elixir'
" Generate Vim tags for Erlang files
Plugin 'vim-erlang/vim-erlang-tags'
" Dockerfile syntax
Plugin 'ekalinin/Dockerfile.vim'
" Perform diffs on blocks of code
Plugin 'AndrewRadev/linediff.vim'
" Elm plugin for Vim
Plugin 'ElmCast/elm-vim'
" Basic vim/terraform integration
Plugin 'hashivim/vim-terraform.git'
" Beautify JS, JSON, HTML & CSS files
Plugin 'maksimr/vim-jsbeautify'
" YAML syntax/indent plugin for Vim
Plugin 'mrk21/yaml-vim'
" Auto-format code
" https://github.com/vim-autoformat/vim-autoformat
Plugin 'vim-autoformat/vim-autoformat'

call vundle#end()

" display invisible characters
set list

" Additions from http://mislav.uniqpath.com/2011/12/vim-revisited/
set nowrap         " don't wrap lines
set shiftwidth=2   " a tab is two spaces
set expandtab      " use spaces, not tabs (optional)
set hlsearch       " highlight matches
set ignorecase     " searches are case insensitive...
set smartcase      " ... unless they contain at least one capital letter

" Additions from http://c7.se/switching-to-vundle/
filetype plugin indent on
set cursorline
set modeline
set modelines=5
set clipboard=unnamed,unnamedplus
" Controls the max width after which syntax highlighting stops being applied
" Setting this to a high value might result in a sluggish vim
set synmaxcol=300
set ttyfast
set number
set nowritebackup
set noswapfile
set nobackup
set colorcolumn=80

set termguicolors

" Use the old regex engine. The new one is slowing down when editing .erl files
set re=1

" Abandon unloaded buffers
set hidden

" Refresh file if it was modified outside vim
set autoread

let mapleader=","

set completeopt=menu " otherwise autocomplete options will appear in a top preview pane

let g:airline_powerline_fonts = 1 " automatically populate the g:airline_symbols dictionary
if filereadable( expand("$HOME/.vim/bundle/gruvbox/colors/gruvbox.vim") )
  colorscheme gruvbox
endif
" if filereadable( expand("$HOME/.vim/bundle/vim-solarized8/colors/solarized8_high.vim") )
"   colorscheme solarized8_high
" endif

" Disable $( ) red highlights in shell scripts
let g:is_posix = 1

" Best ESC mapping
inoremap <Leader><Leader> <ESC>
vnoremap <Leader><Leader> <ESC>
noremap <Leader><Leader> <ESC>

" Open up Netwr
nnoremap <Leader>n :e .<CR>

" Quick write, quit & write-quit
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>Q :bd<CR>
nnoremap <Leader>x :x<CR>

" Quick dark & light background
nnoremap <Leader>l :set background=light<CR>
nnoremap <Leader>d :set background=dark<CR>

" Git ncurses
nnoremap <Leader>g :!tig --all<CR>

" Disable automatic folding
let g:vim_markdown_folding_disabled=1

" Search in tags
nnoremap <Leader>\ :TagbarToggle<CR>

" CtrlP configuration
" Search in files
nnoremap <Leader>f :CtrlP<CR>
" Search in most recently used files, globally
nnoremap <Leader>r :CtrlPMRU<CR>
" Search in buffers
nnoremap <Leader>b :CtrlPBuffer<CR>

" Adjust the match window to display more results & not jump
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:20,results:20'
" Show hidden files in search list
let g:ctrlp_show_hidden = 1
" Search by filename
" let g:ctrlp_by_filename = 1
" No max file limit
let g:ctrlp_max_files = 0
" Set the working directory
let g:ctrlp_working_path_mode = 'ra'
" c - the directory of the current file
" r - the nearest ancestor that contains one of these directories or files: .git .hg .svn .bzr _darcs
" a - like c, but only if the current working directory outside of CtrlP is not a direct ancestor of the directory of the current file
" 0 or '' (empty string) - disable this feature

" The Silver Searcher + CtrlP
nnoremap \ :Ag<Space>
" Use ag over grep
set grepprg=ag\ --nogroup\ --nocolor

" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
let g:ctrlp_user_command = 'ag %s --files-with-matches --nocolor --hidden --skip-vcs-ignores -g ""'
" ag is fast enough that CtrlP doesn't need to cache
let g:ctrlp_use_caching = 0

" Syntastic config
let g:syntastic_aggregate_errors = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_html_tidy_ignore_errors=[
\'proprietary attribute "ng-',
\'proprietary attribute "marked',
\'proprietary attribute "analytics',
\]
let g:syntastic_go_checkers = ['go', 'govet', 'errcheck']
" Allow following other files
let g:syntastic_sh_shellcheck_args = "-x"

" Comment lines
noremap <Leader>/ :Commentary<CR>

" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
" map <Leader>s :call RunNearestSpec()<CR>
" map <Leader>l :call RunLastSpec()<CR>
" map <Leader>a :call RunAllSpecs()<CR>

" Gundo mapping
nnoremap <Leader>u :GundoToggle<CR>

" Automatic formatting
autocmd BufWritePre *.rb :%s/\s\+$//e
autocmd BufWritePre *.haml :%s/\s\+$//e
autocmd BufWritePre *.html :%s/\s\+$//e
autocmd BufWritePre *.scss :%s/\s\+$//e
autocmd BufWritePre *.slim :%s/\s\+$//e

" Do not add newline at end of files
au BufNewFile * set noeol

" Auto save on losing focus
au FocusLost * :wa

" Normalise regexes
nnoremap / /\v
vnoremap / /\v

" Searches are global by default
set gdefault

" Clear search once done
nnoremap <Leader><Space> :noh<CR>

" Navigate buffers
" nnoremap <Space>, :bprevious<CR>
" nnoremap <Space>. :bnext<CR>

" Whenever a new split opens, equalize all
set equalalways

" Navigate splits
nnoremap <Leader>m <C-W>h
nnoremap <Leader>. <C-W>l
nnoremap <Leader>k <C-W>k
nnoremap <Leader>, <C-W>j

" Create a vertical split and start using it
nnoremap <Leader>v <C-w>v<C-w>l
" Create a horizontal split and start using it
nnoremap <Leader>s <C-w>s<C-w>j

" Maximise split
nnoremap <Leader>z <C-W>\|<C-W>_
" Equalise splits
nnoremap <Leader>= <C-W>=

" Quickly switch between tabs
nnoremap <Leader>p :tabe<CR>
nnoremap <Leader>] :tabn<CR>
nnoremap <Leader>[ :tabp<CR>

" Use tab to match bracket pairs
nnoremap <Tab> %
vnoremap <Tab> %

" Select the text that was just pasted
nnoremap <Leader>V V`]

" Reload vimrc whenever it changes
augroup reload_vimrc " {
  autocmd!
  autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

" Disable all folds when opening Concourse files
au FileType concourse setlocal nofoldenable

au BufRead,BufNewFile {Rakefile} set ft=ruby
au BufRead,BufNewFile {Guardfile} set ft=ruby
au BufRead,BufNewFile {Vagrantfile} set ft=ruby
au BufRead,BufNewFile {Brewfile} set ft=ruby

au FileType erlang setlocal shiftwidth=4

au BufRead,BufNewFile *.ejs set ft=html

au BufRead,BufNewFile *.service set ft=systemd

" Treat bats file like bash files
" Disable sh shellchecker to avoid false errors
" shellcheck will catch all errors
au BufRead,BufNewFile *.bats set ft=bash |
  \ let g:syntastic_sh_checkers = ['shellcheck']


" Run elm-format on save
let g:elm_format_autosave = 1
" <Leader>m	Compile the current buffer.
" <Leader>b	Compile the Main.elm file in the project.
" <Leader>t	Runs the tests of the current buffer or 'tests/TestRunner'.
" <Leader>r	Opens an elm repl in a subprocess.
" <Leader>e	Shows the detail of the current error or warning.
" <Leader>d	Shows the type and docs for the word under the cursor.
" <Leader>w	Opens the docs web page for the word under the cur
let g:elm_syntastic_show_warnings = 1

au BufRead,BufNewFile *.go set ft=go
au BufWritePre *.go :%s/\s\+$//e

let g:go_fmt_command = "goimports"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>r <Plug>(go-run)
au FileType go nmap <Leader>b <Plug>(go-build)
au FileType go nmap <Leader>t <Plug>(go-test)
au FileType go nmap <Leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>e <Plug>(go-rename)
au FileType go set listchars=tab:  

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }

set exrc
set secure
